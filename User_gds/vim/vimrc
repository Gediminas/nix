""let $VIMRUNTIMEDIR="."

""""""""""""""""""""""""""""""""""""""""""""""""
" " DECLUTTER
set nocompatible
set modelines=0

""""""""""""""""""""""""""""""""""""""""""""""""
" " LOOK AND FEEL
behave xterm
syntax on
"set t_Co=256
set mouse=a

if has("gui_running")
  if has("gui_win32")
    set lines=100 columns=150
    set guifont=Consolas:h11:cANSI
  elseif has("gui_gtk2")
    set lines=999 columns=999
    set guifont=Inconsolata\ 12
  elseif has("gui_macvim")
    set lines=999 columns=999
    set guifont=Menlo\ Regular:h14
  else
    if exists("+lines")
      set lines=100
    endif
    if exists("+columns")
      set columns=100
    endif
  endif
endif


let g:zenburn_old_Visual = 1
let g:zenburn_subdued_LineNr = 1
colorscheme zenburn
colors zenburn

"colors monokai
"colorscheme monokai
"let g:rehash256 = 1
"""let g:molokai_original = 1

set noswapfile
set noundofile
set nobackup

set autoindent
set encoding=utf-8
set scrolloff=5
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set number
set relativenumber
"set autochdir
"set visualbell

" " Window
set nowrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85

" " Tabs
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" " Folds
set foldmethod=indent
set foldnestmax=10
set foldlevel=99
set foldlevelstart=10
set foldenable
"set nofoldenable

augroup vimrc
  au BufReadPre * setlocal foldmethod=indent
  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
augroup END




" " case-sensitive search intelligently
set ignorecase
set smartcase

" " work together to highlight search results
set incsearch
set showmatch
set hlsearch

" increment as decimal 007->008
set nrformats=



""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""
" " KEYS

noremap <Space> <Nop>
sunmap <Space>
let g:mapleader=" "

"inoremap jk <esc>

" replace selected text with default register without yanking it
vnoremap <leader>p "_dP

nnoremap U <C-R>

nnoremap j gj
nnoremap k gk

" " Single-handed HalfPageUp/Down
map <A-j> <C-d>
map <A-k> <C-u>


" " Windows
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>

" " git difftool/vimdiff navigate to next/prev difference
if &diff
  nnoremap <C-n> ]c
  nnoremap <C-p> [c
endif

" " Save
nnoremap <C-s> :update<cr>
inoremap <C-s> <Esc>:update<cr>


map <F12> :e $MYVIMRC<CR>

" set clipboard = "unnamedplus"
" let g:wayland_clipboard_no_plus_to_w = 1
vnoremap <Leader>p "+p
vnoremap <Leader>P "+P
vnoremap <Leader>y "+y

""""""""""""""""""""""""""""""""""""""""""""""""
"function! Toggle_Light_Dark_Colorscheme()
"  if system('tmux show-environment THEME')[0:9] == 'THEME=dark'
"    :silent :!tmux set-environment THEME 'light'
"    :silent :!tmux source-file ~/.tmux_light.conf
"  else
"    :silent :!tmux set-environment THEME 'dark'
"    :silent :!tmux source-file ~/.tmux_dark.conf
"  endif
"  :call SetColorScheme()
"endfunction
"
"function! SetColorScheme()
"  " check if tmux colorsheme is light or dark, and pick for vim accordingly
"  if system('tmux show-environment THEME')[0:9] == 'THEME=light'
"    colorscheme seoul256-light
"  else
"    colorscheme zenburn
"  endif
"endfunction
"
"call SetColorScheme()
"
"nnoremap <Leader>o :call Toggle_Light_Dark_Colorscheme()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""
" " NERDTree & nerdtree-git-plugin

"http://vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/
"let NERDTreeHijackNetrw=1
"prettier
"
let NERDTreeWinPos = "right"
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
nnoremap <Leader>m :NERDTreeToggle<CR>
nnoremap <Leader>n :NERDTreeFind<CR>

""map <Leader>q :wqa<CR>
nnoremap <Leader><Leader> <C-^>


""""""""""""""""""""""""""""""""""""""""""""""""
" " tmux
let g:tmux_navigator_save_on_switch = 2


""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""
" " PLUGINS

"" execute pathogen#infect()
"" filetype plugin indent on
""
let g:airline_theme='simple'

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'preservim/nerdtree'
Plug 'christoomey/vim-tmux-navigator'
" Plug 'jasonccox/vim-wayland-clipboard'
" Plug 'tmux-plugins/vim-tmux-focus-events'
if executable('go') | Plug 'fatih/vim-go', {'for': 'go'} | endif
" Plug https://github.com/tpope/vim-repeat
" Plug https://github.com/tpope/vim-surround
" Plug https://github.com/marijnh/tern_for_vim
" Plug https://github.com/xolox/vim-misc.git
" Plug https://github.com/w0rp/ale
" Plug https://github.com/valloric/youcompleteme
" Plug https://github.com/tpope/vim-obsession.git
"Plug 'mrtazz/simplenote.vim'
call plug#end()
" run :PlugInstall
"
"source ~/.simplenoterc

" https://unix.stackexchange.com/questions/656854/switch-between-light-and-dark-mode-in-vim-and-tmux-with-one-command
" set -g focus-events on
" autocmd FocusGained * :call SetColorScheme()


" Install missing plugins on Vim startup
autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif
