#!/bin/env bash

# Prefix key Ctrl+A
unbind-key C-b
set-option -g prefix C-a
bind-key C-a send-prefix

set  -g mouse on
set  -s set-clipboard external
# set  -s copy-command 'wl-copy'
set  -g history-limit 50000
set  -g buffer-limit 20
set -sg escape-time 0
set  -g display-time 1500
set  -g remain-on-exit off
set  -g repeat-time 300
setw -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize on
set  -g set-titles on
set  -g set-titles-string "#I:#W"
set  -g base-index 1
setw -g pane-base-index 1
set  -g status on
set  -g status-interval 5
set  -g status-position top
set  -g status-justify left
set  -g status-right-length 100


# ==========================
# Theme

source-file ~/.tmux/themes/dark.conf
# source-file ~/.tmux/themes/light.conf
bind -n M-[ source-file ~/.tmux/themes/dark.conf
bind -n M-] source-file ~/.tmux/themes/light.conf

# ==========================
# 24-bit color

# https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6
# https://www.reddit.com/r/tmux/comments/osnjtk/colours_not_showing_properly
# Test1: ~/scripts/tcolors24.sh
# Test2: echo -e "\e[3mitalic\e[0m"
# Test3: Home/End keys in all tmux+nvim modes


# Both work on Linux NoxOS, but xterm supports italics
# Must match alacritty config env: TERM:
# set -g default-terminal "screen-256color"
set -g default-terminal "xterm-256color"

# One of those sets 256 colors:
# set-option -a terminal-overrides ",screen-256color:RGB"
# set-option -a terminal-overrides ",alacritty:RGB"
set-option -a terminal-overrides ",*256col*:RGB"

# This kind of works on MacOS
# set -g default-terminal "screen-256color"

# This does not work well on MacOS
# set  -g default-terminal "tmux-256color"

# Linux: Home/End does not work
# Linux: Italic works OK (helix themes)
# set  -g default-terminal "xterm-256color"
# Enabled this for Home/End to work OK on Linux
# Linux: Italic does not work

# # tmux 3.2+
# if-shell -b '[ `tmux -V | cut -d" " -f2 | tr -d " |\-|.|[:alpha:]"` -ge 32 ]' \
#   'set -as terminal-features ",xterm-256color:RGB"'
# # tmux < 3.2
# if-shell -b '[ `tmux -V | cut -d" " -f2 | tr -d " |\-|.|[:alpha:]"` -lt 32 ]' \
#   'set -ga terminal-overrides ",xterm-256color*:Tc"'

# ==========================
# Panes/windows

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_vifm="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vifm?x?)(diff)?$'"

bind -n "C-h" if-shell "$is_vim" "send C-h" "select-pane -L"
bind -n "C-j" if-shell "$is_vim" "send C-j" "select-pane -D"
bind -n "C-k" if-shell "$is_vim" "send C-k" "select-pane -U"
bind -n "C-l" if-shell "$is_vim" "send C-l" "select-pane -R"
bind -n "C-tab" "select-pane -l"
bind -n "M-tab" "select-pane -l"

bind -T copy-mode-vi "C-h"   "select-pane -L"
bind -T copy-mode-vi "C-j"   "select-pane -D"
bind -T copy-mode-vi "C-k"   "select-pane -U"
bind -T copy-mode-vi "C-l"   "select-pane -R"
bind -T copy-mode-vi "C-tab" "select-pane -l"
bind -T copy-mode-vi "M-tab" "select-pane -l"

# Switch to workspace via Alt + # (Alacritty remap Ctrl+[0..9;] => Alt+[0..9;])
# bind -n "M-1" if-shell "tmux select-window -t 1"  "" "new-window -t 1"
# bind -n "M-2" if-shell "tmux select-window -t 2"  "" "new-window -t 2"
# bind -n "M-3" if-shell "tmux select-window -t 3"  "" "new-window -t 3"
# bind -n "M-4" if-shell "tmux select-window -t 4"  "" "new-window -t 4"
# bind -n "M-5" if-shell "tmux select-window -t 5"  "" "new-window -t 5"
# bind -n "M-6" if-shell "tmux select-window -t 6"  "" "new-window -t 6"
# bind -n "M-7" if-shell "tmux select-window -t 7"  "" "new-window -t 7"
# bind -n "M-8" if-shell "tmux select-window -t 8"  "" "new-window -t 8"
# bind -n "M-9" if-shell "tmux select-window -t 9"  "" "new-window -t 9"
# bind -n "M-0" if-shell "tmux select-window -t 10" "" "new-window -t 10"
bind -n "M-1"   select-window -t 1
bind -n "M-2"   select-window -t 2
bind -n "M-3"   select-window -t 3
bind -n "M-4"   select-window -t 4
bind -n "M-5"   select-window -t 5
bind -n "M-6"   select-window -t 6
bind -n "M-7"   select-window -t 7
bind -n "M-8"   select-window -t 8
bind -n "M-9"   select-window -t 9
bind -n "M-0"   select-window -t 10
#bind -n "M-;"   "select-pane -l"
bind -n "M-;"   last-window
bind -n "C-;"   last-window
bind -n "M-tab" last-window
# bind -n "C-tab" last-window

# Resize panes
bind -n M-h resize-pane -L 5
bind -n M-j resize-pane -D 5
bind -n M-k resize-pane -U 5
bind -n M-l resize-pane -R 5

bind -n M-H resize-pane -L 1
bind -n M-J resize-pane -D 1
bind -n M-K resize-pane -U 1
bind -n M-L resize-pane -R 1

# Create panes/windows
bind c   new-window -c "#{pane_current_path}"
bind C-h split-window -hb -c "#{pane_current_path}"
bind C-j split-window -v  -c "#{pane_current_path}"
bind C-k split-window -vb -c "#{pane_current_path}"
bind C-l split-window -h  -c "#{pane_current_path}"
# bind  - split-window -v -c "#{pane_current_path}"
# bind \; split-window -h -c "#{pane_current_path}"

# Move pane
bind -n "M-C-h" "select-pane -L \; swap-pane -s '!' \; select-pane -L"
bind -n "M-C-j" "select-pane -D \; swap-pane -s '!' \; select-pane -D"
bind -n "M-C-k" "select-pane -U \; swap-pane -s '!' \; select-pane -U"
bind -n "M-C-l" "select-pane -R \; swap-pane -s '!' \; select-pane -R"

# Zoom pane
bind -n "C-z" resize-pane -Z
bind -n "C-Space" resize-pane -Z
# bind -n "C-Enter" resize-pane -Z
# unbind -n "C-z"
# unbind -n "C-Space"
# unbind -n "C-Enter"
bind "C-Enter" resize-pane -Z

# Link window
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

#unbind -n "C-n"
#bind -n "C-n" if-shell "$is_vifm" "send C-n" "run-shell 'hxt #{pane_current_path}'"

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-q confirm-before -p "kill-session #S? (y/n)" kill-session


# ============================
# Edit configuration and reload

bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"
#bind C-g source-file ~/.tmux.conf \; display "Config reloaded"
bind C-g source-file ~/.tmux.conf \; display "Config reloaded"
bind g   source-file ~/.tmux.conf \; display "Config reloaded"
bind F5  source-file ~/.tmux.conf \; display "Config reloaded"
# bind F6 exec nvim ~/.tmux.conf \; source-file ~/.tmux.conf \; display "Config reloaded"


# ============================
# Copy mode, scroll and clipboard

# Prefer vi style key table
setw -g mode-keys vi

# bind p paste-buffer
# bind C-p choose-buffer

# trigger copy mode by
bind k copy-mode
# bind -n C-Up copy-mode
# # bind -n PageUp copy-mode
# # bind -n PageDown copy-mode

# # Scroll up/down by 1 line, half screen, whole screen
# bind -T copy-mode-vi C-Up       send -X scroll-up
# bind -T copy-mode-vi C-Down     send -X scroll-down
# bind -T copy-mode-vi C-PageUp   send -X halfpage-up
# bind -T copy-mode-vi C-PageDown send -X halfpage-down
# bind -T copy-mode-vi PageDown   send -X page-down
# bind -T copy-mode-vi PageUp     send -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane   select-pane \; send -X -N 5 scroll-up
bind -T copy-mode-vi WheelDownPane select-pane \; send -X -N 5 scroll-down

bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-no-clear
# bind -T copy-mode-vi MouseDown1Pane select-pane\; send -X clear-selection
# bind -T copy-mode-vi MouseDown1Pane select-pane

bind -T copy-mode-vi v   send -X begin-selection
bind -T copy-mode-vi r   send -X rectangle-toggle
bind -T copy-mode-vi y   send -X copy-pipe
# bind -T copy-mode-vi C-c send -X copy-pipe
bind -T copy-mode-vi Y   send -X copy-end-of-line
bind -T copy-mode-vi A   send -X append-selection
bind -T copy-mode-vi V   send -X select-line
bind -T copy-mode-vi m   send -X set-mark
bind -T copy-mode-vi \'  send -X jump-to-mark
bind -T copy-mode-vi \,  send -X jump-to-mark


# Mouse can be used to select panes, select windows (by clicking on the status
# bar), resize panes. Default bindings (as per `list-keys`) are:

# bind -T root MouseDown1Pane   select-pane -t = ; send-keys -M
# bind -T root MouseDown1Status select-window -t =
# bind -T root MouseDown3Pane   select-pane -m -t =
# bind -T root MouseDrag1Pane   if-shell -F -t = #{mouse_any_flag} "if -Ft= "#{pane_in_mode}" "copy-mode -M" "send-keys -M"" "copy-mode -M"
bind -T root MouseDrag1Border resize-pane -M


# Make double and triple click work outside of copy mode (already works inside it with default bindings).
bind -T copy-mode-vi DoubleClick1Pane send-keys -X select-word
bind -T copy-mode-vi TripleClick1Pane send-keys -X select-line

# ==========================
# Fixes/Workarounds

# Fix Home/End keys on tmux+nvim
# https://github.com/neovim/neovim/issues/6134
bind-key -n Home send Escape "OH"
bind-key -n End send Escape "OF"

## ============================

#  Plugins

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @yank_selection 'clipboard'
# set -g @yank_selection_mouse 'clipboard'
# set -g @yank_action 'copy-pipe-no-clear' # or 'copy-pipe-and-cancel' for the default


set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-save-shell-history 'on'
set -g @resurrect-processes '\
          vi vim nvim hx less more \
          top htop watch tail man dmesg \
          nnn vifm mc ranger \
          gitui \
          ssh mosh-client tsh \
          "docker exec" "vagrant ssh"
          ff'
resurrect_dir="~/.local/share/tmux/resurrect"
set -g @resurrect-dir $resurrect_dir
# set -g @resurrect-hook-post-save-all '~/.tmux/post_save.sh $resurrect_dir/last'
# set -g @resurrect-hook-post-save-all ''

set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '10'

# Run all plugins' scripts
run -b '~/.tmux/plugins/tpm/tpm'
